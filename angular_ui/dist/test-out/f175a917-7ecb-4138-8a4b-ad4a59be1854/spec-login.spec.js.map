{
  "version": 3,
  "sources": ["angular:jit:template:src\\app\\login\\login.html", "angular:jit:style:src\\app\\login\\login.css", "src/app/login/login.ts", "src/app/login/login.spec.ts"],
  "sourcesContent": ["<div class=\"container mt-5\" style=\"max-width: 400px;\">\r\n    <h3 class=\"text-center mb-4\">Login</h3>\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Email</label>\r\n            <input type=\"email\" formControlName=\"email\" class=\"form-control\" placeholder=\"Enter your email\"\r\n                [class.is-invalid]=\"loginForm.controls['email'].invalid && loginForm.controls['email'].touched\" />\r\n            <div class=\"invalid-feedback\">\r\n                Please enter a valid email address.\r\n            </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n            <label class=\"form-label\">Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control\" placeholder=\"Enter your password\"\r\n                [class.is-invalid]=\"loginForm.controls['password'].invalid && loginForm.controls['password'].touched\" />\r\n            <div class=\"invalid-feedback\">\r\n                Password must be at least 4 characters long.\r\n            </div>\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary w-100\" [disabled]=\"loginForm.invalid\">\r\n            Login\r\n        </button>\r\n\r\n        @if(errorMessage) {\r\n        <div class=\"alert alert-danger mt-3\">{{ errorMessage }}</div>\r\n        }\r\n    </form>\r\n</div>", "/* src/app/login/login.css */\n/*# sourceMappingURL=login.css.map */\n", "import { Component } from '@angular/core';\r\n//import { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n\r\nimport { AuthService } from '../service/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n//  imports: [FormsModule],\r\n\r\n  imports: [ReactiveFormsModule],\r\n  templateUrl: './login.html',\r\n  styleUrls: ['./login.css']\r\n})\r\nexport class Login {\r\n  email = '';\r\n  password = '';\r\n  errorMessage = '';\r\n\r\n  loginForm: FormGroup;\r\n  constructor(private formBuilder: FormBuilder, private authService: AuthService) {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(4)]]\r\n    });\r\n  }\r\n\r\n  onLogin() {\r\n    if (this.loginForm.invalid) {\r\n      this.loginForm.markAllAsTouched();\r\n      return;\r\n    }\r\n \r\n    this.errorMessage = '';\r\n\r\n    this.email = this.loginForm.get('email')?.value;\r\n    this.password = this.loginForm.get('password')?.value;\r\n\r\n    console.log('Email:', this.email);\r\n    console.log('Password:', this.password);\r\n\r\n    var user = {\r\n      email: this.email,\r\n      password: this.password\r\n    }\r\n\r\n    console.log(user)\r\n\r\n    this.authService.login(user).subscribe({\r\n      next: (res) => {\r\n        console.log(res)\r\n        if (res.access) {\r\n          console.log(\"has access token\")\r\n\r\n          this.authService.saveTokens(res.access, res.refresh);\r\n          window.location.href = '/member'; // Or use Angular Router\r\n        } else {\r\n          this.errorMessage = res.error || 'Invalid credentials.';\r\n        }\r\n      },\r\n      error: () => {\r\n        this.errorMessage = 'Error connecting to server.';\r\n      }\r\n    });\r\n  }\r\n}\r\n", "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { Login } from './login';\r\n\r\ndescribe('Login', () => {\r\n  let component: Login;\r\n  let fixture: ComponentFixture<Login>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [Login]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(Login);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA;AAAA,IAAAC,cAAA;AAAA;AAAA,IAAAD,iBAAA;AAAA;AAAA;;;ICgBa;;;;;;;AAhBb;AAEA;AACA;AAGA;AAUO,IAAM,QAAN,MAAME,OAAK;MAMI;MAAkC;MALtD,QAAQ;MACR,WAAW;MACX,eAAe;MAEf;MACA,YAAoB,aAAkC,aAAwB;AAA1D,aAAA,cAAA;AAAkC,aAAA,cAAA;AACpD,aAAK,YAAY,KAAK,YAAY,MAAM;UACtC,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,KAAK,CAAC;UACnD,UAAU,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;SAC9D;MACH;MAEA,UAAO;AACL,YAAI,KAAK,UAAU,SAAS;AAC1B,eAAK,UAAU,iBAAgB;AAC/B;QACF;AAEA,aAAK,eAAe;AAEpB,aAAK,QAAQ,KAAK,UAAU,IAAI,OAAO,GAAG;AAC1C,aAAK,WAAW,KAAK,UAAU,IAAI,UAAU,GAAG;AAEhD,gBAAQ,IAAI,UAAU,KAAK,KAAK;AAChC,gBAAQ,IAAI,aAAa,KAAK,QAAQ;AAEtC,YAAI,OAAO;UACT,OAAO,KAAK;UACZ,UAAU,KAAK;;AAGjB,gBAAQ,IAAI,IAAI;AAEhB,aAAK,YAAY,MAAM,IAAI,EAAE,UAAU;UACrC,MAAM,CAAC,QAAO;AACZ,oBAAQ,IAAI,GAAG;AACf,gBAAI,IAAI,QAAQ;AACd,sBAAQ,IAAI,kBAAkB;AAE9B,mBAAK,YAAY,WAAW,IAAI,QAAQ,IAAI,OAAO;AACnD,qBAAO,SAAS,OAAO;YACzB,OAAO;AACL,mBAAK,eAAe,IAAI,SAAS;YACnC;UACF;UACA,OAAO,MAAK;AACV,iBAAK,eAAe;UACtB;SACD;MACH;;;;;;AAlDW,YAAK,WAAA;MARjB,UAAU;QACT,UAAU;;QAGV,SAAS,CAAC,mBAAmB;QAC7B,UAAA;;OAED;OACY,KAAK;;;;;AChBlB;;;AAEA,IAAAC;AAEA,aAAS,SAAS,MAAK;AACrB,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,KAAK;SAChB,EACA,kBAAiB;AAElB,kBAAU,QAAQ,gBAAgB,KAAK;AACvC,oBAAY,QAAQ;AACpB,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,iBAAiB,MAAK;AACvB,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;IACH,CAAC;;;",
  "names": ["login_default", "init_login", "Login", "init_login"]
}
